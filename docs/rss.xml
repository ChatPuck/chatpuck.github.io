<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Feeday</title><link>https://pucks.cn</link><description>BB Work No Money</description><copyright>Feeday</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://pucks.cn</link></image><lastBuildDate>Wed, 21 May 2025 15:26:19 +0000</lastBuildDate><managingEditor>Feeday</managingEditor><ttl>60</ttl><webMaster>Feeday</webMaster><item><title>获取网页链接</title><link>https://pucks.cn/post/huo-qu-wang-ye-lian-jie.html</link><description>控制台浏览器获取网址
```
const links = document.getElementsByTagName('a');
// 遍历所有链接并查找匹配的网址
for (const link of links) {
  const href = link.href;
  // 使用正则表达式匹配类似的网址
  const urlRegex = /https:\/\/www\.bilibili\.com\/video\/[A-Za-z0-9]+\/?/;
  if (urlRegex.test(href)) {
    console.log('匹配到的网址: ' + href);
  }
}
```。</description><guid isPermaLink="true">https://pucks.cn/post/huo-qu-wang-ye-lian-jie.html</guid><pubDate>Wed, 21 May 2025 15:25:51 +0000</pubDate></item><item><title>查找替换</title><link>https://pucks.cn/post/cha-zhao-ti-huan.html</link><description>搜索匹配当前目录下所有[文件名]或文件里的内容打印显示行号
```
grep -rn 'Money' *
```

搜索多个文件并查找匹配文本在哪些文件中：
```
grep -l 'Money' file1 file2 file3...
```

查找 formatting.php 文件内 length’, 55 替换 length’, 56 :
```
sed -i s/'length', 55'/'length', 56'/g `grep 'length', 55' -rl --include='formatting.php' ./`
```。</description><guid isPermaLink="true">https://pucks.cn/post/cha-zhao-ti-huan.html</guid><pubDate>Wed, 21 May 2025 15:21:43 +0000</pubDate></item><item><title>移到文件</title><link>https://pucks.cn/post/yi-dao-wen-jian.html</link><description>### 按照指定文件名移到文件

### 简介
假设目录与文件如下：
```
H:\
├─ data
│   ├─ report1.txt
│   ├─ image_fail.png
│   └─ sub
│       └─ test_error.log
├─ list.txt
└─ copy    （初始为空）
```

list.txt 内容（每行一个关键字）
```
report
fail
missing
error
```

运行控制台输出：
```
✔ 已移动: 'report1.txt' 对应关键字 'report' 到 'H:\copy\report1.txt'
✔ 已移动: 'image_fail.png' 对应关键字 'fail' 到 'H:\copy\image_fail.png'
⚠ 未找到匹配文件 for key: 'missing'
✔ 已移动: 'test_error.log' 对应关键字 'error' 到 'H:\copy\test_error.log'
 
共 4 个关键字，成功移动 3 个，对应文件。</description><guid isPermaLink="true">https://pucks.cn/post/yi-dao-wen-jian.html</guid><pubDate>Wed, 21 May 2025 15:17:39 +0000</pubDate></item><item><title>删除重复图像</title><link>https://pucks.cn/post/shan-chu-zhong-fu-tu-xiang.html</link><description>```
import os
import cv2
import numpy as np
from keras.applications.resnet50 import ResNet50, preprocess_input
 
# pip install opencv-python numpy keras tensorflow
 
def extract_image_features(image_path):
    image = cv2.imread(image_path)  # 读取图片
    image = cv2.resize(image, (256, 256))  # 缩放图片到统一尺寸
    image = image[16:240, 16:240]  # 裁剪中间区域(224x224)
    
    image = np.expand_dims(image, axis=0)  # 扩展维度以匹配模型输入要求
    image = preprocess_input(image)  # 预处理图片
    
    features = model.predict(image)  # 提取特征向量
    features /= np.linalg.norm(features)  # 归一化特征向量
    
    return features.flatten()  # 平铺特征向量
 
def delete_duplicate_images():
    current_dir = os.getcwd()  # 获取当前目录路径
    files = [f for f in os.listdir(current_dir) if os.path.isfile(os.path.join(current_dir, f))]  # 获取当前目录下的所有文件
 
    image_features = {}
    deleted_count = 0  # 记录删除的图片数量
    duplicate_pairs = []  # 用于保存重复图片的文件名对
 
    for file_name in files:
        if file_name.endswith('.jpg') or file_name.endswith('.png'):  # 筛选出图片文件
            file_path = os.path.join(current_dir, file_name)
            image_feature = extract_image_features(file_path)
 
            is_duplicate = False
            for existing_path, existing_feature in image_features.items():
                distance = np.linalg.norm(existing_feature - image_feature)  # 计算欧氏距离
                if distance &lt; 0.3:  # 设定阈值来判断相似度，根据实际情况调整
                    is_duplicate = True
                    print(f'删除重复图片: {file_path}')
                    os.remove(file_path)
                    deleted_count += 1
                    # 记录重复的文件名对 (当前文件名和已有文件名)
                    duplicate_pairs.append((file_name, os.path.basename(existing_path)))
                    break
 
            if not is_duplicate:
                image_features[file_path] = image_feature
 
    # 将重复图片文件名对保存到txt文件
    if duplicate_pairs:
        with open('duplicate_images.txt', 'w') as f:
            for file1, file2 in duplicate_pairs:
                f.write(f'{file1} 与 {file2} 重复\n')
    
    print('已删除 {} 张重复图片'.format(deleted_count))
 
# 加载预训练的ResNet50模型
model = ResNet50(weights='imagenet', include_top=False, pooling='avg')
 
delete_duplicate_images()
```。</description><guid isPermaLink="true">https://pucks.cn/post/shan-chu-zhong-fu-tu-xiang.html</guid><pubDate>Wed, 21 May 2025 15:12:16 +0000</pubDate></item><item><title>MD5处理文件</title><link>https://pucks.cn/post/MD5-chu-li-wen-jian.html</link><description>## 删除MD5值相同的文件

通过MD5值把重复的文件移到del文件夹，表格记录。</description><guid isPermaLink="true">https://pucks.cn/post/MD5-chu-li-wen-jian.html</guid><pubDate>Tue, 20 May 2025 14:06:10 +0000</pubDate></item><item><title>同步代码</title><link>https://pucks.cn/post/tong-bu-dai-ma.html</link><description>## 常用的 Git 命令

更新端口刷新DNS

```
git config --global http.proxy 127.0.0.1:7890
git config --global https.proxy 127.0.0.1:7890
ipconfig/flushdns
```
### 代码仓库拉取推送

- https://github.com/settings/ssh/new
- https://huggingface.co/settings/keys/add?type=ssh

拉取仓库本地到本地推送到远程仓库

```
git clone https://github.com/lllyasviel/Fooocus.git
git config --global user.email 'you@example.com'
git config --global user.name 'Your Name'
git remote set-url origin git@github.com:lllyasviel/Fooocus.git
ssh-keygen -t rsa -b 4096 -C 'your_email@example.com'
ssh -T git@github.com
git add . 
git commit -m 'Test' 
```

本地推送到远程仓库
```
git push origin main
```
远程仓库同步到本地 
```
git pull origin main  
```

### 1. **克隆远程仓库**

克隆一个远程仓库到本地，命令如下：

```bash
git clone https://github.com/lllyasviel/Fooocus.git
```

### 2. **检查当前 Git 配置**

查看 Git 的全局配置，如用户名和邮箱：

```bash
git config --list
```

### 3. **检查当前状态**

查看当前工作目录和暂存区的状态（哪些文件已修改、未跟踪等）：

```bash
git status
```

### 4. **添加文件到暂存区**

将文件添加到暂存区，准备提交：

```bash
git add &lt;file_name&gt;  # 添加指定文件
git add .  # 添加所有修改的文件
```

### 5. **提交更改**

提交更改并添加提交信息：

```bash
git commit -m '描述本次提交的内容'
```

### 6. **推送远程仓库**

将本地更改推送到远程仓库：

```bash
git push origin branch-name
```

### 7. **远程仓库更新**

拉取远程仓库的更新，并合并到当前分支：

```bash
git pull origin branch-name
```

### 8. **查看远程仓库信息**

查看当前项目的远程仓库地址：

```bash
git remote -v
```

### 9. **查看提交历史**

查看提交历史记录：

```bash
git log
```

### 10. **创建新分支**

创建一个新分支，并切换到该分支：

```bash
git checkout -b new-branch-name
```

### 11. **切换分支**

切换到已有的分支：

```bash
git checkout branch-name
```

### 12. **合并分支**

将当前分支合并到目标分支：

```bash
git merge branch-name
```



。</description><guid isPermaLink="true">https://pucks.cn/post/tong-bu-dai-ma.html</guid><pubDate>Mon, 19 May 2025 14:11:45 +0000</pubDate></item><item><title>查找代码</title><link>https://pucks.cn/post/cha-zhao-dai-ma.html</link><description>## Windows 查找
```
Get-ChildItem -Recurse -File | Select-String -Pattern '56'
```
## Bash 查找
搜索匹配当前目录下所有文件名或文件里的内容打印显示行号
```
grep -rn 'Money' *
```
搜索多个文件并查找匹配文本在哪些文件中：
```
grep -l 'Money' file1 file2 file3...
```
查找 formatting.php 文件内 length’, 55 替换 length’, 56 :

```
sed -i s/'length', 55'/'length', 56'/g `grep 'length', 55' -rl --include='formatting.php' ./`
```。</description><guid isPermaLink="true">https://pucks.cn/post/cha-zhao-dai-ma.html</guid><pubDate>Sat, 17 May 2025 16:51:21 +0000</pubDate></item><item><title>博客部署</title><link>https://pucks.cn/post/bo-ke-bu-shu.html</link><description>[Gmeek](https://github.com/Meekdai/Gmeek) 一个博客框架，超轻量级个人博客模板，完全基于`Github Pages `、 `Github Issues` 和 `Github Actions`，可以称作`All in Github`。</description><guid isPermaLink="true">https://pucks.cn/post/bo-ke-bu-shu.html</guid><pubDate>Sat, 17 May 2025 16:40:35 +0000</pubDate></item></channel></rss>